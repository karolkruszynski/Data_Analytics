# -*- coding: utf-8 -*-
"""numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/130TlkUBzolVu376yU1Rm_1Xt7I4Hhu6F
"""

import numpy as np

a = np.array([1, 2, 3])
a

type(a)

a.dtype

a.ndim

a.size

a.shape

b = np.array([[1.3,2.4],[0.3,4.1]])
b

b.dtype

b.ndim

b.size

b.shape

b.itemsize

c = np.array([[1,2,3],[4,5,6]])
c

d = np.array(((1,2,3),(4,5,6)))
d

e = np.array([(1,2,3), [4,5,6],(7,8,9)])
e

g = np.array([['a','b'],['c','d']])
g

g.dtype.name

f = np.array([[1,2,3],[4,5,6]], dtype=complex)
f

np.zeros((3,3))

np.ones((3,3))

np.arange(0,10)

np.arange(4,10)

np.arange(0,12,3)

np.arange(0,6,0.6)

np.arange(0,12).reshape(3,4)

np.linspace(0,10,5)

np.linspace(0,10,7)

np.random.random(3)

np.random.random((3,3))

a = np.arange(4)
a

a+4

a*2

b = np.arange(4,8)
b

a + b

a - b

a * b

a * np.sin(b)

a * np.sqrt(b)

A =  np.arange(0,9).reshape(3,3)
A

B = np.ones((3,3))
B

A * B

np.dot(A,B)

A.dot(B)

np.dot(B,A)

np.dot(A,B)

a = np.arange(4)
a

a += 1
a

a -= 1
a

a += 4
a

a *= 2
a

"""**Funkcje Element po Elemencie**"""

a = np.arange(1,5)
a

np.sqrt(a)

np.log(a)

np.sin(a)

"""**Funkcje AgregujÄ…ce**"""

a = np.array([3.3,4.5,1.2,5.7,0.3])
a

a.sum()

a.min()

a.max()

a.mean()

a.std()

a = np.arange(10,16)
a

a[4]

a[-1]

a[-6]

A = np.arange(10,19).reshape(3,3)
A

A[1,2]

a = np.arange(10,16)
a

a[1:5]

a[1:5:2]

a[::2]

a[:5:2]

a[:5:]

A = np.arange(10,19).reshape(3,3)
A

A[0,:]

A[:,0]

A[0:2,0:2]

A[[0,2],0:2]

for i in a:
  print(i)

for row in A:
  print(row)

for item in A.flat:
  print(item)

np.apply_along_axis(np.mean,0,A)

np.apply_along_axis(np.mean,1,A)

def foo(x):
  return x/2

np.apply_along_axis(foo,0,A)

np.apply_along_axis(foo,1,A)

A = np.random.random((4,4))
A

A < 0.5

A[A < 0.5]

a = np.random.random(12)
a

A = a.reshape(3,4)
A

a.shape = (3,4)
a

a = a.ravel()
a

a.shape = (A.size)
a

A.transpose()

A = np.ones((3,3))
B = np.zeros((3,3))
np.vstack((A,B))

np.hstack((A,B))

a = np.array([0,1,2])
b = np.array([3,4,5])
c = np.array([6,7,8])
np.column_stack((a,b,c))

np.row_stack((a,b,c))

A = np.arange(16).reshape(4,4)
A

[B,C] = np.hsplit(A,2)
B
C

[B,C] = np.vsplit(A,2)
B
C

[A1,A2,A3] = np.array_split(A,[1,3],axis=1)

A3

[A1,A2,A3] = np.split(A,[1,3],axis=0)
A2

a = np.array([1,2,3,4])
b = a
b

a[2] = 0
b

c = a[0:2]
c

a[0] = 0
c

a = np.array([1,2,3,4])
c = a.copy()
c

a[0] = 0
c

a * b

A = np.arange(16).reshape(4,4)
b = np.arange(4)
b

A + b

m = np.arange(6).reshape(3,1,2)
n = np.arange(6).reshape(3,2,1)
n

m + n

